# Default values for browserless.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""
clusterDomain: "cluster.local"

replicaCount: 1

imagePullSecrets: []

image:
  repository: ghcr.io/browserless/chromium
  tag: latest
  pullPolicy: Always

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


# Configuration for browserless. Refer to official docs for more details: https://docs.browserless.io/
config:
  # By default, requests using the file:// procotol are denied for security reasons.
  ALLOW_FILE_PROTOCOL: false
  # Max no. of concurrent sessions. Once the limit is reached then queueing begins to take place and requests will wait until more workers are ready.
  CONCURRENT: 5
  # Cross-origin-resource-sharing
  CORS: false
  # When CORS=true, by default, all OPTIONS, POST, and GET requests are allowed. You can modify that here.
  CORS_ALLOW_METHODS: ""
  # When CORS=true, by default, requests from all origins are allowed. You can modify that here.
  CORS_ALLOW_ORIGIN: ""
  # Enable to check CPU/Memory prior to running a session. If the instance's CPU/Memory are high on any inbound session (HTTP APIs, Puppeteer or Playwright), Browserless will respond with a 503 status code.
  HEALTH: true
  # Max no. of items in queue.
  QUEUED: 10
  # Time in milliseconds for which any session can run for.
  TIMEOUT: 120000
  # Browserless is designed to always require a token. This means that, if you don't pass a TOKEN, a randomly generated token will be set.
  TOKEN: ""

# Additional environment variables
additionalEnvVars: {}

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 3000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

livenessProbe:
  httpGet:
    path: /active
    port: http
  initialDelaySeconds: 30
readinessProbe:
  httpGet:
    path: /active
    port: http
  initialDelaySeconds: 30

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
